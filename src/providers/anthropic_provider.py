"""
Anthropic API „Éó„É≠„Éê„Ç§„ÉÄ„ÉºÂÆüË£Ö

Anthropic Claude API„Çí‰ΩøÁî®„Åó„ÅüÁøªË®≥Âá¶ÁêÜ„ÇíÊèê‰æõ„Åô„Çã„ÄÇ
Êó¢Â≠ò„ÅÆtranslator.py„Åã„ÇâAnthropicÂõ∫Êúâ„ÅÆÊ©üËÉΩ„ÇíÁßªË°å„Åó„ÄÅBaseProvider„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Å´ÈÅ©Âêà„Åï„Åõ„Çã„ÄÇ
"""

import time
from typing import Dict, Any, Optional
from tqdm.auto import tqdm
import tenacity
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

from .base_provider import BaseProvider, APIError, HTTPStatusError, RateLimitError
from src.unicode_handler import normalize_unicode_text, validate_text_for_api


class AnthropicProvider(BaseProvider):
    """
    Anthropic API„Éó„É≠„Éê„Ç§„ÉÄ„Éº
    
    Anthropic Claude API„Çí‰ΩøÁî®„Åó„Å¶„ÉÜ„Ç≠„Çπ„ÉàÁøªË®≥„ÇíÂÆüË°å„Åô„Çã„ÄÇ
    ÈÅÖÂª∂„Ç§„É≥„Éù„Éº„Éà„Å®„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Ê©üËÉΩ„ÇíÂê´„ÇÄ„ÄÇ
    """
    
    def __init__(self, api_key: str, model_name: Optional[str] = None, timeout: int = 500):
        """
        Anthropic„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÅÆÂàùÊúüÂåñ
        
        Args:
            api_key: Anthropic API „Ç≠„Éº
            model_name: ‰ΩøÁî®„Åô„Çã„É¢„Éá„É´ÂêçÔºàNone„ÅÆÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„Çí‰ΩøÁî®Ôºâ
            timeout: „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÊôÇÈñìÔºàÁßíÔºâ
        """
        super().__init__(api_key, model_name, timeout)
        self._anthropic_client = None  # ÈÅÖÂª∂„Ç§„É≥„Éù„Éº„ÉàÁî®
        
        # AnthropicÂõ∫Êúâ„ÅÆË®≠ÂÆö
        self._generation_config = {
            "max_tokens": 100000,
            "temperature": 0.0
        }
    
    def get_default_model(self) -> str:
        """
        „Éá„Éï„Ç©„É´„Éà„ÅÆAnthropic„É¢„Éá„É´Âêç„ÇíËøî„Åô
        
        Returns:
            „Éá„Éï„Ç©„É´„Éà„É¢„Éá„É´Âêç
        """
        return "claude-3-7-sonnet"
    
    def _initialize_client(self):
        """
        Anthropic API„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇíÈÅÖÂª∂ÂàùÊúüÂåñ„Åô„Çã
        """
        if self._anthropic_client is None:
            try:
                import anthropic
                self._anthropic_client = anthropic.Anthropic(api_key=self.api_key, timeout=self.timeout)
                tqdm.write("Anthropic API„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü")
                    
            except ImportError as e:
                raise APIError(f"Anthropic API„É©„Ç§„Éñ„É©„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {e}")
            except Exception as e:
                raise APIError(f"Anthropic APIÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
    
    def _validate_response(self, response) -> str:
        """
        Anthropic API„É¨„Çπ„Éù„É≥„Çπ„ÇíÊ§úË®º„Åó„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫„Åô„Çã
        
        Args:
            response: Anthropic API„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
            
        Returns:
            ÊäΩÂá∫„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà
            
        Raises:
            APIError: „É¨„Çπ„Éù„É≥„Çπ„ÅÆÂΩ¢Âºè„Åå‰∏çÊ≠£„Å™Â†¥Âêà
        """
        # „É¨„Çπ„Éù„É≥„Çπ„ÅÆÂü∫Êú¨Ê§úË®º
        if not hasattr(response, 'content') or not response.content or len(response.content) == 0:
            raise APIError("Anthropic API„Åã„Çâ„ÅÆÂøúÁ≠î„Å´content„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
        
        # content[0]„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if not hasattr(response.content[0], 'text'):
            raise APIError("Anthropic API„Åã„Çâ„ÅÆÂøúÁ≠î„ÅÆÂΩ¢Âºè„Åå‰∏çÊ≠£„Åß„Åô")
        
        text_content = response.content[0].text
        if not text_content:
            raise APIError("Anthropic API„Åã„Çâ„ÅÆÂøúÁ≠î„ÅåÁ©∫„Åß„Åô")
        
        return text_content
    
    @retry(
        stop=stop_after_attempt(5),
        wait=wait_exponential(multiplier=3, min=10, max=180),
        retry=retry_if_exception_type((
            ConnectionError, TimeoutError, HTTPStatusError, APIError,
            UnicodeEncodeError, Exception
        )),
        reraise=True
    )
    def translate(self, text: str, prompt: str) -> str:
        """
        Anthropic API„Çí‰ΩøÁî®„Åó„Å¶„ÉÜ„Ç≠„Çπ„Éà„ÇíÁøªË®≥„Åô„Çã
        
        Args:
            text: ÁøªË®≥ÂØæË±°„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÔºàÁèæÂú®„ÅØ‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÄÅprompt„Å´Âê´„Åæ„Çå„ÇãÔºâ
            prompt: ÁøªË®≥„Éó„É≠„É≥„Éó„Éà
            
        Returns:
            ÁøªË®≥„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà
            
        Raises:
            APIError: APIÂëº„Å≥Âá∫„Åó„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà
            RateLimitError: „É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„ÅüÂ†¥Âêà
        """
        # „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
        self._initialize_client()
        
        # „É¨„Éº„ÉàÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if not self.check_rate_limit():
            remaining_time = self._rate_limit_status["waiting_period"] - (
                time.time() - self._rate_limit_status["last_hit_time"]
            )
            raise RateLimitError(f"„É¨„Éº„ÉàÂà∂Èôê‰∏≠: „ÅÇ„Å®{remaining_time:.1f}ÁßíÂæÖÊ©ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        # „ÉÜ„Ç≠„Çπ„Éà„ÅÆÂâçÂá¶ÁêÜ„Å®„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        is_valid, error_msg = validate_text_for_api(prompt)
        if not is_valid:
            tqdm.write(f"  üîß „Éó„É≠„É≥„Éó„Éà„ÅÆUnicodeÊ≠£Ë¶èÂåñ„ÇíÂÆüË°å‰∏≠... ÁêÜÁî±: {error_msg}")
            normalized_prompt, was_modified = normalize_unicode_text(prompt, aggressive=True)
            if was_modified:
                tqdm.write(f"  ‚Üª Ê≠£Ë¶èÂåñ„Åï„Çå„Åü„Éó„É≠„É≥„Éó„Éà„Çí‰ΩøÁî®„Åó„Åæ„Åô")
                prompt = normalized_prompt
            else:
                tqdm.write(f"  ‚ùì „Éó„É≠„É≥„Éó„Éà„ÅÆÊ≠£Ë¶èÂåñ„Å´„Çà„ÇãÂ§âÊõ¥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
        
        try:
            # Anthropic APIÂëº„Å≥Âá∫„Åó
            response = self._anthropic_client.messages.create(
                model=self.model_name,
                max_tokens=self._generation_config["max_tokens"],
                temperature=self._generation_config["temperature"],
                messages=[{"role": "user", "content": prompt}]
            )
            
            # „É¨„Çπ„Éù„É≥„Çπ„ÅÆÊ§úË®º„Å®„ÉÜ„Ç≠„Çπ„ÉàÊäΩÂá∫
            return self._validate_response(response)
            
        except UnicodeEncodeError as e:
            # UnicodeEncodeErrorÂ∞ÇÁî®„ÅÆÂá¶ÁêÜ
            tqdm.write(f"  ! UnicodeÂá¶ÁêÜ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {str(e)}")
            
            # „Éó„É≠„É≥„Éó„Éà„ÅÆÂÜçÂá¶ÁêÜ„ÇíË©¶Ë°å
            tqdm.write(f"  üîß „Éó„É≠„É≥„Éó„Éà„ÅÆUnicodeÊ≠£Ë¶èÂåñ„ÇíÂÆüË°å‰∏≠...")
            normalized_prompt, was_modified = normalize_unicode_text(prompt, aggressive=True)
            
            if was_modified:
                tqdm.write(f"  ‚Üª Ê≠£Ë¶èÂåñ„Åï„Çå„Åü„Éó„É≠„É≥„Éó„Éà„ÅßÂÜçË©¶Ë°å‰∏≠...")
                response = self._anthropic_client.messages.create(
                    model=self.model_name,
                    max_tokens=self._generation_config["max_tokens"],
                    temperature=self._generation_config["temperature"],
                    messages=[{"role": "user", "content": normalized_prompt}]
                )
                return self._validate_response(response)
            else:
                tqdm.write(f"  ‚ùì „Éó„É≠„É≥„Éó„Éà„ÅÆÊ≠£Ë¶èÂåñ„Å´„Çà„ÇãÂ§âÊõ¥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
                raise e
                
        except Exception as e:
            # „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
            error_type = type(e).__name__
            error_msg = str(e)
            
            # HTTP„Ç®„É©„Éº„ÅÆË©≥Á¥∞Âá¶ÁêÜ
            if hasattr(e, 'status_code'):
                status_code = e.status_code
                
                # „É¨„Éº„ÉàÂà∂Èôê„Ç®„É©„Éº (429) „ÅÆÂá¶ÁêÜ
                if status_code == 429:
                    retry_count = getattr(self, '_retry_count', 1)
                    wait_time = 60 + (retry_count * retry_count * 10)
                    self.set_rate_limit_hit(wait_time)
                    tqdm.write(f"  ! „É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü: {wait_time}ÁßíÂæÖÊ©ü„Åó„Åæ„Åô")
                    time.sleep(wait_time)
                    raise RateLimitError(f"Anthropic API„É¨„Éº„ÉàÂà∂Èôê: {error_msg}")
                
                # „Åù„ÅÆ‰ªñ„ÅÆHTTP„Ç®„É©„Éº
                elif status_code in [503, 504]:
                    tqdm.write(f"  ! „Çµ„Éº„Éê„Éº„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Ç®„É©„Éº ({status_code}): {error_msg}")
                    raise HTTPStatusError(status_code, f"Anthropic API„Çµ„Éº„Éê„Éº„Ç®„É©„Éº: {error_msg}")
                else:
                    tqdm.write(f"  ! HTTP „Ç®„É©„Éº ({status_code}): {error_msg}")
                    raise HTTPStatusError(status_code, f"Anthropic API HTTP„Ç®„É©„Éº: {error_msg}")
            
            # „É¨„Éº„ÉàÂà∂ÈôêÈñ¢ÈÄ£„ÅÆ„Ç®„É©„ÉºÔºàstatus_code„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
            elif "rate limit" in error_msg.lower() or "429" in error_msg:
                retry_count = getattr(self, '_retry_count', 1)
                wait_time = 60 + (retry_count * retry_count * 10)
                self.set_rate_limit_hit(wait_time)
                tqdm.write(f"  ! „É¨„Éº„ÉàÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü: {wait_time}ÁßíÂæÖÊ©ü„Åó„Åæ„Åô")
                time.sleep(wait_time)
                raise RateLimitError(f"Anthropic API„É¨„Éº„ÉàÂà∂Èôê: {error_msg}")
            
            # „Åù„ÅÆ‰ªñ„ÅÆ„Ç®„É©„Éº
            else:
                tqdm.write(f"  ! Anthropic APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº ({error_type}): {error_msg}")
                raise APIError(f"Anthropic APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº: {error_msg}")
    
    def validate_api_key(self) -> bool:
        """
        Anthropic API„Ç≠„Éº„ÅÆÊúâÂäπÊÄß„ÇíÊ§úË®º„Åô„Çã
        
        Returns:
            API„Ç≠„Éº„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅØTrue
        """
        try:
            self._initialize_client()
            # Á∞°Âçò„Å™„ÉÜ„Çπ„ÉàÂëº„Å≥Âá∫„Åó„ÅßÁ¢∫Ë™ç
            test_response = self._anthropic_client.messages.create(
                model=self.model_name,
                max_tokens=10,
                temperature=0.0,
                messages=[{"role": "user", "content": "Hello"}]
            )
            return test_response is not None and hasattr(test_response, 'content')
        except Exception as e:
            tqdm.write(f"Anthropic API„Ç≠„ÉºÊ§úË®º„Ç®„É©„Éº: {str(e)}")
            return False
    
    def get_rate_limits(self) -> Dict[str, Any]:
        """
        Anthropic API„ÅÆ„É¨„Éº„ÉàÂà∂ÈôêË®≠ÂÆö„ÇíÂèñÂæó„Åô„Çã
        
        Returns:
            „É¨„Éº„ÉàÂà∂Èôê„Å´Èñ¢„Åô„ÇãË®≠ÂÆöËæûÊõ∏
        """
        return {
            "max_requests_per_minute": 50,  # Anthropic API„ÅÆ‰∏ÄËà¨ÁöÑ„Å™Âà∂Èôê
            "max_tokens_per_minute": 40000,  # Ê¶ÇÁÆóÂÄ§
            "max_requests_per_day": 1000,
            "provider": "anthropic"
        }